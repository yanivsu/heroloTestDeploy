{"version":3,"sources":["helpers/enums.js","reducers/weatherReducer.js","reducers/searchCityReducer.js","reducers/favoriteCitiesReducer.js","reducers/rootReducer.js","helpers/apiUtils.js","actions/defaultAction.js","components/Header/headerComp.js","components/weatherMainComp/weatherMain.js","components/weatherMainComp/weatherCard.js","components/SearchComp/searchComp.js","components/FavoriteComp/favoiteComp.js","App.js","reportWebVitals.js","index.js","store/confingStore.js"],"names":["serverWeatherEnums","weatherEnums","mainEnums","INITIAL_STATE","isLoading","cityName","cityCode","tempFunction","weatherForecast","tempatureMin","tempatureMax","date","iconNumber","iconPharse","weatherReducer","state","action","produce","draft","type","enums","payload","fiveDaysForecast","data","DailyForecasts","forEach","day","Date","EpochDate","tempDay","Intl","DateTimeFormat","weekday","format","oneDayForecaste","Math","floor","parseInt","Temperature","Minimum","Value","Maximum","foreCastDay","Day","Icon","IconPhrase","push","index","citiesOptions","searchCityReducer","Array","isArray","options","city","newCity","countryName","Country","LocalizedName","code","Key","length","faivorteCities","faivorteCitiesReducer","findIndex","value","dayName","rootReducer","combineReducers","getApi","api","a","obj","axios","get","response","console","log","status","headers","request","message","loadWeaterByCode","dispatch","then","catch","error","useStyles","makeStyles","theme","appBar","borderRadius","title","flexGrow","menuButton","marginRight","spacing","button","fontSize","fontFamily","fontWeight","toggle","margin","createTheme","palette","primary","light","main","dark","contrastText","secondary","menuItem","width","height","Header","props","classes","dispatcher","useDispatch","useState","temp","setState","history","useHistory","className","root","ThemeProvider","AppBar","position","Toolbar","IconButton","edge","color","Typography","variant","Button","onClick","Grid","item","Switch","checked","onChange","event","bit","target","name","weatherStatus","WeatherMain","open","setOpen","alertInfo","setAlertInfo","selectorFavorites","useSelector","handleCloseAlert","container","direction","alignItems","justifyContent","xs","src","style","alt","unitMode","cityIndex","Snackbar","autoHideDuration","onClose","Alert","severity","WeatherCard","Card","CardContent","component","undefined","SerachCity","searchCity","setSearchCity","selectedCity","setSelectedCity","citiesListSelector","loading","useEffect","Autocomplete","getOptionSelected","option","getOptionLabel","renderInput","params","TextField","placeholder","str","charAt","toUpperCase","slice","Favorite","selectorFavorite","map","header","padding","textAlign","background","mainWeather","darkIcon","App","darkMode","setDarkMode","weatherSelector","React","useMemo","typography","h4","h5","h3","h2","navigator","geolocation","getCurrentPosition","result","lat","long","coords","latitude","longitude","err","timeout","handleDarkMode","CssBaseline","path","CircularProgress","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c3e6d4d.chunk.js","sourcesContent":["export const serverWeatherEnums = {\n  API_5DAYS_FORECAST:\n    \"https://dataservice.accuweather.com/forecasts/v1/daily/5day/\",\n  API_SEARCH_CITY_BY_NAME:\n    \"https://dataservice.accuweather.com/locations/v1/cities/autocomplete?\",\n  API_GET_CITY_CODE_BY_COORDS:\n    \"https://dataservice.accuweather.com/locations/v1/cities/geoposition/search?\",\n  API_QUERY: \"&q=\",\n  API_ICON_LINK: \"https://vortex.accuweather.com/adc2010/images/slate/icons/\",\n  APIKEY: \"apikey=jLMc5cduIdwlcXOpx7os5VopnXqUldFt\",\n  TEMPERATURE: \"&metric=true\", // Celsuis\n  HAIFA_KEY: \"213181\",\n  QUESTION_MARK: \"?\",\n  HAIFA: \"Haifa\",\n  SVG: \".svg\",\n  COMMA: \",\",\n};\n\nexport const weatherEnums = {\n  WEATHER_FETCH_DATA: \"WEATHER_FETCH_DATA\",\n  AUTOCOMPLETE_CITIES_LIST: \"AUTOCOMPLETE_CITIES_LIST\",\n  ADD_FAVORITE_CITY: \"ADD_FAVORITE_CITY\",\n  CHANGE_C_OR_F: \"CHANGE_C_OR_F\",\n  CEL: \"°C\",\n  FER: \"°F\",\n};\n\nexport const mainEnums = {\n  ADD_TO_FAV: \"❤️ Add to Favorites\",\n};\n","import produce from \"immer\";\nimport * as enums from \"../helpers/enums\";\n\nconst INITIAL_STATE = {\n  isLoading: true,\n  cityName: \"\",\n  cityCode: \"\",\n  tempFunction: true, // true -- Cel , false -- F\n  weatherForecast: [\n    {\n      tempatureMin: \"\",\n      tempatureMax: \"\",\n      date: \"\",\n      iconNumber: 0,\n      iconPharse: \"\",\n      cityCode: \"\",\n    },\n  ],\n};\n\nconst weatherReducer = (state = INITIAL_STATE, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case enums.weatherEnums.WEATHER_FETCH_DATA: {\n        draft.isLoading = false;\n        draft.cityCode = action.payload.cityCode;\n        draft.cityName = action.payload.cityName;\n        let fiveDaysForecast = [];\n        action.payload.data.DailyForecasts.forEach((day) => {\n          let date = new Date(day.EpochDate * 1000);\n          var options = { weekday: \"short\" };\n          let tempDay = new Intl.DateTimeFormat(\"en-US\", options).format(date);\n          let oneDayForecaste = {\n            tempatureMin: Math.floor(parseInt(day.Temperature.Minimum.Value)),\n            tempatureMax: Math.floor(parseInt(day.Temperature.Maximum.Value)),\n            date: day.Date,\n            foreCastDay: tempDay,\n            iconNumber: day.Day.Icon,\n            iconPharse: day.Day.IconPhrase,\n            cityCode: action.payload.cityCode,\n          };\n          if (!draft.tempFunction) {\n            oneDayForecaste.tempatureMin =\n              oneDayForecaste.tempatureMin * (9 / 5) + 32;\n            oneDayForecaste.tempatureMax =\n              oneDayForecaste.tempatureMax * (9 / 5) + 32;\n          }\n          fiveDaysForecast.push(oneDayForecaste);\n        });\n        draft.weatherForecast = fiveDaysForecast;\n        return draft;\n      }\n      case enums.weatherEnums.CHANGE_C_OR_F: {\n        if (!action.payload) {\n          draft.tempFunction = false;\n          draft.weatherForecast.forEach((day, index) => {\n            draft.weatherForecast[index].tempatureMin = Math.floor(\n              parseInt(day.tempatureMin * (9 / 5) + 32)\n            );\n            draft.weatherForecast[index].tempatureMax = Math.floor(\n              parseInt(day.tempatureMax * (9 / 5) + 32)\n            );\n          });\n          return draft;\n        } else if (action.payload) {\n          draft.tempFunction = true;\n          draft.weatherForecast.forEach((day, index) => {\n            draft.weatherForecast[index].tempatureMin = Math.floor(\n              parseInt((day.tempatureMin - 32) * (5 / 9))\n            );\n\n            draft.weatherForecast[index].tempatureMax = Math.floor(\n              parseInt((day.tempatureMax - 32) * (5 / 9))\n            );\n          });\n          return draft;\n        }\n        return draft;\n      }\n      default:\n        return draft;\n    }\n  });\n\nexport default weatherReducer;\n","import produce from \"immer\";\nimport * as enums from \"../helpers/enums\";\n\nconst INITIAL_STATE = {\n  isLoading: true,\n  citiesOptions: [],\n};\n\nconst searchCityReducer = (state = INITIAL_STATE, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case enums.weatherEnums.AUTOCOMPLETE_CITIES_LIST: {\n        if (Array.isArray(action.payload)) {\n          let options = [];\n          action.payload.forEach((city) => {\n            let newCity = {\n              countryName: city.Country.LocalizedName,\n              cityName: city.LocalizedName,\n              code: city.Key,\n            };\n            options.push(newCity);\n          });\n\n          draft.citiesOptions = options;\n          draft.isLoading = false;\n        } else {\n          draft.citiesOptions.length = 0;\n        }\n        return draft;\n      }\n      case enums.weatherEnums.CHANGE_C_OR_F: {\n        if (draft.citiesOptions.length > 0) {\n        }\n      }\n      default:\n        return draft;\n    }\n  });\n\nexport default searchCityReducer;\n","import produce from \"immer\";\nimport * as enums from \"../helpers/enums\";\n\nconst INITIAL_STATE = {\n  isLoading: true,\n  faivorteCities: [],\n  tempFunction: true, // 1 -- Cel , 0 -- F\n};\n\nconst faivorteCitiesReducer = (state = INITIAL_STATE, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case enums.weatherEnums.ADD_FAVORITE_CITY: {\n        draft.isLoading = false;\n        // Check if the city is already exist in fav cities:\n        let index = draft.faivorteCities.findIndex((value) => {\n          if (value.cityCode === action.payload.data.cityCode) {\n            return true;\n          }\n        });\n        if (index === -1) {\n          let newCity = {\n            cityName: action.payload.cityName,\n            cityCode: action.payload.data.cityCode,\n            tempatureMin: action.payload.data.tempatureMin,\n            tempatureMax: action.payload.data.tempatureMax,\n            date: action.payload.data.date,\n            dayName: action.payload.data.foreCastDay,\n            iconNumber: action.payload.data.iconNumber,\n            iconPharse: action.payload.data.iconPharse,\n          };\n          draft.faivorteCities.push(newCity);\n        }\n\n        return draft;\n      }\n      case enums.weatherEnums.CHANGE_C_OR_F: {\n        if (!action.payload) {\n          draft.tempFunction = false;\n          draft.faivorteCities.forEach((city, index) => {\n            draft.faivorteCities[index].tempatureMin = Math.floor(\n              parseInt(city.tempatureMin * (9 / 5) + 32)\n            );\n            draft.faivorteCities[index].tempatureMax = Math.floor(\n              parseInt(city.tempatureMax * (9 / 5) + 32)\n            );\n          });\n          return draft;\n        } else if (action.payload) {\n          draft.tempFunction = true;\n          draft.faivorteCities.forEach((city, index) => {\n            draft.faivorteCities[index].tempatureMin = Math.floor(\n              parseInt((city.tempatureMin - 32) * (5 / 9))\n            );\n\n            draft.faivorteCities[index].tempatureMax = Math.floor(\n              parseInt((city.tempatureMax - 32) * (5 / 9))\n            );\n          });\n          return draft;\n        }\n      }\n      default:\n        return draft;\n    }\n  });\n\nexport default faivorteCitiesReducer;\n","import { combineReducers } from \"redux\";\n\nimport weatherReducer from \"./weatherReducer\";\nimport searchCityReducer from \"./searchCityReducer\";\nimport faivorteCitiesReducer from \"./favoriteCitiesReducer\";\n\nconst rootReducer = combineReducers({\n  weatherReducer,\n  searchCityReducer,\n  faivorteCitiesReducer,\n});\nexport default rootReducer;\n","import axios from \"axios\";\n\nexport async function getApi(api, obj = {}) {\n  // Load async data.\n  try {\n    return await axios.get(api, obj);\n  } catch (error) {\n    // console.error(error);\n    if (error.response) {\n      // Request made and server responded\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log(\"Error\", error.message);\n    }\n  }\n}\n","import { getApi } from \"../helpers/apiUtils\";\nimport * as enums from \"../helpers/enums\";\n//----------------- Async Action functions ----------//\n\nexport function loadWeaterByCode(cityCode, cityName) {\n  return function (dispatch) {\n    return getApi(\n      enums.serverWeatherEnums.API_5DAYS_FORECAST +\n        cityCode +\n        enums.serverWeatherEnums.QUESTION_MARK +\n        enums.serverWeatherEnums.APIKEY +\n        enums.serverWeatherEnums.TEMPERATURE\n    )\n      .then(({ data }) => {\n        dispatch({\n          type: enums.weatherEnums.WEATHER_FETCH_DATA,\n          payload: { data, cityCode, cityName },\n        });\n      })\n      .catch((error) => console.log(\"loadData Error no data\", error.message));\n  };\n}\n\nexport function loadCitiesByName(cityName) {\n  return function (dispatch) {\n    return getApi(\n      enums.serverWeatherEnums.API_SEARCH_CITY_BY_NAME +\n        enums.serverWeatherEnums.APIKEY +\n        enums.serverWeatherEnums.API_QUERY +\n        cityName\n    )\n      .then(({ data }) => {\n        dispatch({\n          type: enums.weatherEnums.AUTOCOMPLETE_CITIES_LIST,\n          payload: data,\n        });\n      })\n      .catch((error) => console.log(\"loadData Error no data\", error.message));\n  };\n}\n\nexport function loadWeaterByCoords(lat, long) {\n  return function (dispatch) {\n    return getApi(\n      enums.serverWeatherEnums.API_GET_CITY_CODE_BY_COORDS +\n        enums.serverWeatherEnums.APIKEY +\n        enums.serverWeatherEnums.API_QUERY +\n        lat +\n        enums.serverWeatherEnums.COMMA +\n        long\n    )\n      .then(({ data }) => {\n        // Get city Code from data\n        let cityCode = data.Key;\n        let cityName = data.LocalizedName;\n        dispatch(loadWeaterByCode(cityCode, cityName));\n      })\n      .catch((error) => console.log(\"loadData Error no data\", error.message));\n  };\n}\n\nexport function addCityToFavorite(cityDetails) {\n  return { type: enums.weatherEnums.ADD_FAVORITE_CITY, payload: cityDetails };\n}\n\nexport function changeToTempStatus(bit) {\n  return { type: enums.weatherEnums.CHANGE_C_OR_F, payload: bit };\n}\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport { makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { createTheme } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport { changeToTempStatus } from \"../../actions/defaultAction\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    borderRadius: \"20px\",\n  },\n  title: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(0),\n  },\n  button: {\n    fontSize: \"1 rem\",\n    fontFamily: \"Titillium Web\",\n    fontWeight: \"bold\",\n    marginRight: theme.spacing(2),\n  },\n  toggle: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      light: \"#30CE88\",\n      main: \"#30CE88\",\n      dark: \"#205374\",\n      contrastText: \"#205374\",\n    },\n    secondary: {\n      main: \"#205374\",\n    },\n    menuItem: {\n      width: \"100%\",\n      height: \"100%\",\n    },\n  },\n});\n\nexport default function Header(props) {\n  const classes = useStyles();\n  const dispatcher = useDispatch();\n\n  const [state, setState] = useState({\n    temp: true,\n  });\n\n  const history = useHistory();\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n    dispatcher(changeToTempStatus(!state.temp));\n  };\n\n  return (\n    <div className={classes.root}>\n      <ThemeProvider theme={theme}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"menu\"\n            ></IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Weather\n            </Typography>\n            <Button\n              className={classes.button}\n              color=\"inherit\"\n              onClick={() => {\n                history.push(\"\");\n              }}\n            >\n              Home 🏡\n            </Button>\n            <Button\n              className={classes.button}\n              color=\"inherit\"\n              onClick={() => {\n                history.push(\"favorites\");\n              }}\n            >\n              Favorites 💖\n            </Button>\n            <Grid>\n              <Typography>°F</Typography>\n            </Grid>\n            <Grid item>\n              <Switch\n                checked={state.temp}\n                onChange={handleChange}\n                name=\"temp\"\n              />\n            </Grid>\n            <Grid item>\n              <Typography>°C</Typography>\n            </Grid>\n          </Toolbar>\n        </AppBar>\n      </ThemeProvider>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\n\nimport { addCityToFavorite } from \"../../actions/defaultAction\";\nimport * as enums from \"../../helpers/enums\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: { flexGrow: 1 },\n\n  title: {\n    fontFamily: \"Titillium Web\",\n    fontWeight: \"bold\",\n  },\n  weatherStatus: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport default function WeatherMain(props) {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [alertInfo, setAlertInfo] = useState(\"\");\n  const selectorFavorites = useSelector((state) => state.faivorteCitiesReducer);\n  const dispatcher = useDispatch();\n\n  const handleAddToFavoriteCities = () => {\n    let cityIndex = selectorFavorites.faivorteCities.findIndex((city) => {\n      if (city.cityCode === props.data.cityCode) return true;\n    });\n    if (selectorFavorites.faivorteCities.length === 0 || cityIndex === -1) {\n      dispatcher(addCityToFavorite(props));\n      setAlertInfo(\"City Added to favorite List.\");\n      setOpen(!open);\n    } else {\n      setAlertInfo(\"City already in the favorite list.\");\n      setOpen(!open);\n    }\n  };\n\n  const handleCloseAlert = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Grid\n        container\n        direction=\"row\"\n        xs={12}\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n      >\n        <Typography className={classes.title} variant=\"h3\">\n          <img\n            src={\n              enums.serverWeatherEnums.API_ICON_LINK +\n              props.data.iconNumber +\n              enums.serverWeatherEnums.SVG\n            }\n            style={{ width: \"2.5em\", height: \"2.5em\" }}\n            alt=\"Weather Icon\"\n          ></img>\n\n          {props.cityName}\n          {\" \" + props.data.tempatureMax}\n          {props.unitMode ? enums.weatherEnums.CEL : enums.weatherEnums.FER}\n        </Typography>\n\n        <Button onClick={handleAddToFavoriteCities}>\n          <Typography className={classes.title} variant=\"h5\">\n            {enums.mainEnums.ADD_TO_FAV}\n          </Typography>\n        </Button>\n      </Grid>\n\n      {/* Wheather Status */}\n      <Grid\n        className={classes.weatherStatus}\n        container\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <Typography variant=\"h4\">{props.data.iconPharse}</Typography>\n      </Grid>\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleCloseAlert}>\n        <Alert variant=\"filled\" severity=\"info\" onClose={handleCloseAlert}>\n          {alertInfo}\n        </Alert>\n      </Snackbar>\n    </Grid>\n  );\n}\n","import React from \"react\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Typography } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nimport * as enums from \"../../helpers/enums\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: theme.spacing(3),\n  },\n}));\n\nexport default function WeatherCard(props) {\n  const classes = useStyles();\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Grid container direction=\"column\" alignItems=\"center\">\n          <Typography variant=\"h5\" component=\"h2\">\n            {props.data.foreCastDay !== undefined\n              ? props.data.foreCastDay\n              : props.data.cityName}\n          </Typography>\n          <Typography variant=\"body2\" component=\"p\">\n            <img\n              src={\n                enums.serverWeatherEnums.API_ICON_LINK +\n                props.data.iconNumber +\n                enums.serverWeatherEnums.SVG\n              }\n              style={{ width: \"4.5em\", height: \"4.5em\", margin: \"2px\" }}\n              alt=\"Weather Icon\"\n            ></img>\n          </Typography>\n          <Typography variant=\"h5\" component=\"h2\">\n            {props.data.tempatureMin}\n            {props.unitMode\n              ? enums.weatherEnums.CEL\n              : enums.weatherEnums.FER} - {props.data.tempatureMax}\n            {props.unitMode ? enums.weatherEnums.CEL : enums.weatherEnums.FER}\n          </Typography>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nimport {\n  loadCitiesByName,\n  loadWeaterByCode,\n} from \"../../actions/defaultAction\";\n\nexport default function SerachCity(props) {\n  const [searchCity, setSearchCity] = useState(\"\");\n  const [selectedCity, setSelectedCity] = useState(\"\");\n\n  const citiesListSelector = useSelector((state) => state.searchCityReducer);\n  const loading =\n    searchCity !== \"\" && citiesListSelector.citiesOptions.length === 0;\n\n  const dispatcher = useDispatch();\n\n  useEffect(() => {\n    dispatcher(loadCitiesByName(searchCity));\n  }, [searchCity]);\n\n  useEffect(() => {\n    dispatcher(loadWeaterByCode(selectedCity.code, selectedCity.cityName));\n  }, [selectedCity]);\n\n  return (\n    <Autocomplete\n      getOptionSelected={(option, value) => {\n        if (option.cityName === value.cityName) {\n          setSelectedCity(option);\n        }\n      }}\n      loading={loading}\n      options={citiesListSelector.citiesOptions}\n      getOptionLabel={(option) => {\n        if (option !== undefined) {\n          return `${option.cityName}, ${option.countryName}`;\n        } else {\n          return;\n        }\n      }}\n      style={{ width: 300 }}\n      renderInput={(params) => (\n        <TextField\n          placeholder=\"Search City...\"\n          onChange={(event) => {\n            let str = event.target.value;\n            str = str.charAt(0).toUpperCase() + str.slice(1);\n            setSearchCity(str);\n          }}\n          {...params}\n          variant=\"outlined\"\n        />\n      )}\n    />\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Typography } from \"@material-ui/core\";\n\nimport WeatherCard from \"../weatherMainComp/weatherCard\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontFamily: \"Titillium Web\",\n    fontWeight: \"bold\",\n  },\n}));\n\nexport default function Favorite(props) {\n  const classes = useStyles();\n  const selectorFavorite = useSelector((state) => state.faivorteCitiesReducer);\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Typography variant=\"h3\" className={classes.title}>\n        Favorite Cities\n      </Typography>\n      <Grid\n        direction=\"row\"\n        container\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        {selectorFavorite.faivorteCities.length > 0\n          ? selectorFavorite.faivorteCities.map((city) => {\n              return <WeatherCard data={city} unitMode={props.unitMode} />;\n            })\n          : null}\n      </Grid>\n    </Grid>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  CircularProgress,\n  createTheme,\n  ThemeProvider,\n} from \"@material-ui/core\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\nimport Brightness5Icon from \"@material-ui/icons/Brightness5\";\n\nimport { loadWeaterByCoords } from \"./actions/defaultAction\";\nimport Header from \"./components/Header/headerComp\";\nimport WeatherMain from \"./components/weatherMainComp/weatherMain\";\nimport WeatherCard from \"./components/weatherMainComp/weatherCard\";\nimport SerachCity from \"./components/SearchComp/searchComp\";\nimport Favorite from \"./components/FavoriteComp/favoiteComp\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: { flexGrow: 1 },\n\n  header: {\n    padding: theme.spacing(2),\n    fontWeight: \"Bold\",\n    textAlign: \"center\",\n    color: \"whitesmoke\",\n    background: \"#3f51b5\",\n  },\n  searchCity: {\n    padding: theme.spacing(2),\n  },\n  mainWeather: {\n    padding: theme.spacing(10),\n  },\n  darkIcon: {\n    margin: theme.spacing(2, 2, 2, 2),\n  },\n}));\nfunction App() {\n  const classes = useStyles();\n\n  const [searchCity, setSearchCity] = useState(\"\");\n  const [darkMode, setDarkMode] = useState(false);\n\n  const citiesListSelector = useSelector((state) => state.searchCityReducer);\n\n  const dispatcher = useDispatch();\n  const weatherSelector = useSelector((state) => state.weatherReducer);\n\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          type: darkMode ? \"dark\" : \"light\",\n        },\n      }),\n    [darkMode]\n  );\n\n  theme.typography.h4 = {\n    fontSize: \"0rem\",\n    \"@media (min-width:600px)\": {\n      fontSize: \"5rem\",\n    },\n  };\n\n  theme.typography.h5 = {\n    fontSize: \"1.0rem\",\n    fontFamily: \"Segoe UI\",\n    \"@media (min-width:600px)\": {\n      fontSize: \"1.8rem\",\n    },\n  };\n  theme.typography.h3 = {\n    fontSize: \"1.0rem\",\n    \"@media (min-width:600px)\": {\n      fontSize: \"1.8rem\",\n    },\n  };\n\n  theme.typography.h2 = {\n    fontSize: \"2rem\",\n    fontFamily: \"Segoe UI\",\n    \"@media (min-width:600px)\": {\n      fontSize: \"5rem\",\n    },\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      (result) => {\n        dispatcher(\n          loadWeaterByCoords(result.coords.latitude, result.coords.longitude)\n        );\n      },\n      (err) => {\n        console.error(err);\n      },\n      { timeout: 8000 }\n    );\n  }, []);\n\n  const handleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline>\n        <Router path=\"/heroloTestDeploy\">\n          <Header />\n          {darkMode ? (\n            <Brightness5Icon\n              className={classes.darkIcon}\n              onClick={handleDarkMode}\n            />\n          ) : (\n            <Brightness3Icon\n              className={classes.darkIcon}\n              onClick={handleDarkMode}\n            />\n          )}\n          <Switch>\n            {weatherSelector.isLoading ? (\n              <CircularProgress />\n            ) : (\n              <Route exact path=\"/\">\n                <Grid\n                  container\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                  className={classes.searchCity}\n                >\n                  <SerachCity />\n                </Grid>\n                <Grid container className={classes.mainWeather}>\n                  <WeatherMain\n                    data={weatherSelector.weatherForecast[0]}\n                    cityName={weatherSelector.cityName}\n                    unitMode={weatherSelector.tempFunction}\n                  />\n\n                  <Grid\n                    container\n                    justifyContent=\"space-around\"\n                    alignItems=\"center\"\n                  >\n                    {weatherSelector.weatherForecast.map((day) => {\n                      return (\n                        <WeatherCard\n                          data={day}\n                          unitMode={weatherSelector.tempFunction}\n                        />\n                      );\n                    })}\n                  </Grid>\n                </Grid>\n              </Route>\n            )}\n\n            <Route exact path=\"/favorites\">\n              <Favorite unitMode={weatherSelector.tempFunction} />\n            </Route>\n          </Switch>\n        </Router>\n      </CssBaseline>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport configureStore from \"./store/confingStore\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nconst store = configureStore();\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ReduxProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"../reducers/rootReducer\";\n\nexport default function configureStore() {\n  return createStore(rootReducer, applyMiddleware(thunk));\n}\n"],"sourceRoot":""}